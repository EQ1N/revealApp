rules_version = '2';

service cloud.firestore {
  match /databases/{database}/documents {
    // Check if user is authenticated
    function isAuthenticated() {
      return request.auth != null;
    }
    
    // Check if user is the owner of a document
    function isOwner(userId) {
      return isAuthenticated() && request.auth.uid == userId;
    }

    // Check if user is a member of a group
    function isGroupMember(groupId) {
      return isAuthenticated() && 
        exists(/databases/$(database)/documents/groups/$(groupId)) &&
        request.auth.uid in get(/databases/$(database)/documents/groups/$(groupId)).data.members;
    }

    // Check if a group is public
    function isPublicGroup(groupId) {
      return exists(/databases/$(database)/documents/groups/$(groupId)) &&
        get(/databases/$(database)/documents/groups/$(groupId)).data.isPublic == true;
    }

    // Check if update is only adding current user to members
    function isJoiningGroup() {
      return request.resource.data.diff(resource.data).affectedKeys().hasOnly(['members']) &&
        request.resource.data.members.hasAll(resource.data.members);
    }

    function isOnlyUpdatingRevealStatus() {
      return request.resource.data.diff(resource.data).affectedKeys().hasOnly(['isRevealed']) &&
             isGroupMember(resource.data.groupId);
    }

    // Check if update is only modifying reactions field
    function isModifyingReactions() {
      let affectedKeys = request.resource.data.diff(resource.data).affectedKeys();
      return affectedKeys.hasOnly(['reactions']) && 
             isGroupMember(resource.data.groupId);
    }

    // User profiles
    match /users/{userId} {
      allow read: if isAuthenticated();
      allow create: if isAuthenticated() && request.auth.uid == userId;
      allow update, delete: if isOwner(userId);
    }

    // Usernames collection - allow reading for availability checks
    match /usernames/{username} {
      allow read: if true;  // Allow anyone to check username availability
      allow create: if isAuthenticated() && 
        request.resource.data.uid == request.auth.uid;  // Only allow creating username for self
      allow delete: if isAuthenticated() && 
        resource.data.uid == request.auth.uid;  // Only allow deleting own username
    }

    // Groups collection
    match /groups/{groupId} {
      // Allow reading public groups or groups user is a member of
      allow list: if isAuthenticated();  // Allow listing all groups if authenticated
      allow get: if isAuthenticated() && (
        resource.data.isPublic == true || 
        request.auth.uid in resource.data.members
      );
      
      // Allow creating groups if authenticated
      allow create: if isAuthenticated() && 
        request.resource.data.ownerId == request.auth.uid &&
        request.auth.uid in request.resource.data.members;
      
      // Allow updates if user is the owner OR if it's a public group and user is joining
      allow update: if isAuthenticated() && (
        resource.data.ownerId == request.auth.uid || 
        (resource.data.isPublic == true && isJoiningGroup())
      );
      
      // Allow deletion if user is the owner
      allow delete: if isAuthenticated() && 
        resource.data.ownerId == request.auth.uid;
    }
    
    // Messages collection
    match /messages/{messageId} {
      // Allow reading messages if the group is public or user is a member
      allow read: if isAuthenticated() && (
        isPublicGroup(resource.data.groupId) ||
        isGroupMember(resource.data.groupId)
      );
      
      // Allow creating messages only if user is a member of the group
      allow create: if isAuthenticated() && 
        isGroupMember(request.resource.data.groupId) &&
        request.resource.data.senderId == request.auth.uid;
        
      // Allow updating your own messages or just the reveal status or reactions if you're a group member
      allow update: if isAuthenticated() && (
        resource.data.senderId == request.auth.uid ||
        isOnlyUpdatingRevealStatus() ||
        isModifyingReactions()
      );
        
      // Allow deleting your own messages
      allow delete: if isAuthenticated() && 
        resource.data.senderId == request.auth.uid;
    }

    // Default deny all other collections
    match /{document=**} {
      allow read, write: if false;
    }
  }
}